# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateContribution {
  _count: ContributionCountAggregate
  _max: ContributionMaxAggregate
  _min: ContributionMinAggregate
}

type AggregateOrganization {
  _count: OrganizationCountAggregate
  _max: OrganizationMaxAggregate
  _min: OrganizationMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AuthPayload {
  user: User!
}

type Contribution {
  createdAt: DateTime!
  id: String!
  organization: Organization!
  organizationId: String!
  user: User!
  userId: String!
}

type ContributionCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  organizationId: Int!
  userId: Int!
}

input ContributionCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  organizationId: SortOrder
  userId: SortOrder
}

type ContributionGroupBy {
  _count: ContributionCountAggregate
  _max: ContributionMaxAggregate
  _min: ContributionMinAggregate
  createdAt: DateTime!
  id: String!
  organizationId: String!
  userId: String!
}

input ContributionListRelationFilter {
  every: ContributionWhereInput
  none: ContributionWhereInput
  some: ContributionWhereInput
}

type ContributionMaxAggregate {
  createdAt: DateTime
  id: String
  organizationId: String
  userId: String
}

input ContributionMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  organizationId: SortOrder
  userId: SortOrder
}

type ContributionMinAggregate {
  createdAt: DateTime
  id: String
  organizationId: String
  userId: String
}

input ContributionMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  organizationId: SortOrder
  userId: SortOrder
}

input ContributionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContributionOrderByWithAggregationInput {
  _count: ContributionCountOrderByAggregateInput
  _max: ContributionMaxOrderByAggregateInput
  _min: ContributionMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  organizationId: SortOrder
  userId: SortOrder
}

input ContributionOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  organization: OrganizationOrderByWithRelationInput
  organizationId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ContributionScalarFieldEnum {
  createdAt
  id
  organizationId
  userId
}

input ContributionScalarWhereWithAggregatesInput {
  AND: [ContributionScalarWhereWithAggregatesInput!]
  NOT: [ContributionScalarWhereWithAggregatesInput!]
  OR: [ContributionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  organizationId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ContributionWhereInput {
  AND: [ContributionWhereInput!]
  NOT: [ContributionWhereInput!]
  OR: [ContributionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  organization: OrganizationRelationFilter
  organizationId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ContributionWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type Mutation {
  signUp(userData: SignUpInput!): AuthPayload!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Organization {
  _count: OrganizationCount
  contributions(cursor: ContributionWhereUniqueInput, distinct: [ContributionScalarFieldEnum!], orderBy: [ContributionOrderByWithRelationInput!], skip: Int, take: Int, where: ContributionWhereInput): [Contribution!]!
  createdAt: DateTime!
  id: String!
  name: String!
}

type OrganizationCount {
  contributions: Int!
}

type OrganizationCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
}

input OrganizationCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

type OrganizationGroupBy {
  _count: OrganizationCountAggregate
  _max: OrganizationMaxAggregate
  _min: OrganizationMinAggregate
  createdAt: DateTime!
  id: String!
  name: String!
}

type OrganizationMaxAggregate {
  createdAt: DateTime
  id: String
  name: String
}

input OrganizationMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

type OrganizationMinAggregate {
  createdAt: DateTime
  id: String
  name: String
}

input OrganizationMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input OrganizationOrderByWithAggregationInput {
  _count: OrganizationCountOrderByAggregateInput
  _max: OrganizationMaxOrderByAggregateInput
  _min: OrganizationMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input OrganizationOrderByWithRelationInput {
  contributions: ContributionOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input OrganizationRelationFilter {
  is: OrganizationWhereInput
  isNot: OrganizationWhereInput
}

enum OrganizationScalarFieldEnum {
  createdAt
  id
  name
}

input OrganizationScalarWhereWithAggregatesInput {
  AND: [OrganizationScalarWhereWithAggregatesInput!]
  NOT: [OrganizationScalarWhereWithAggregatesInput!]
  OR: [OrganizationScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  contributions: ContributionListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
}

input OrganizationWhereUniqueInput {
  id: String
}

type Query {
  aggregateContribution(cursor: ContributionWhereUniqueInput, orderBy: [ContributionOrderByWithRelationInput!], skip: Int, take: Int, where: ContributionWhereInput): AggregateContribution!
  aggregateOrganization(cursor: OrganizationWhereUniqueInput, orderBy: [OrganizationOrderByWithRelationInput!], skip: Int, take: Int, where: OrganizationWhereInput): AggregateOrganization!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  contribution(where: ContributionWhereUniqueInput!): Contribution
  contributions(cursor: ContributionWhereUniqueInput, distinct: [ContributionScalarFieldEnum!], orderBy: [ContributionOrderByWithRelationInput!], skip: Int, take: Int, where: ContributionWhereInput): [Contribution!]!
  findFirstContribution(cursor: ContributionWhereUniqueInput, distinct: [ContributionScalarFieldEnum!], orderBy: [ContributionOrderByWithRelationInput!], skip: Int, take: Int, where: ContributionWhereInput): Contribution
  findFirstOrganization(cursor: OrganizationWhereUniqueInput, distinct: [OrganizationScalarFieldEnum!], orderBy: [OrganizationOrderByWithRelationInput!], skip: Int, take: Int, where: OrganizationWhereInput): Organization
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByContribution(by: [ContributionScalarFieldEnum!]!, having: ContributionScalarWhereWithAggregatesInput, orderBy: [ContributionOrderByWithAggregationInput!], skip: Int, take: Int, where: ContributionWhereInput): [ContributionGroupBy!]!
  groupByOrganization(by: [OrganizationScalarFieldEnum!]!, having: OrganizationScalarWhereWithAggregatesInput, orderBy: [OrganizationOrderByWithAggregationInput!], skip: Int, take: Int, where: OrganizationWhereInput): [OrganizationGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(cursor: OrganizationWhereUniqueInput, distinct: [OrganizationScalarFieldEnum!], orderBy: [OrganizationOrderByWithRelationInput!], skip: Int, take: Int, where: OrganizationWhereInput): [Organization!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  contributions(cursor: ContributionWhereUniqueInput, distinct: [ContributionScalarFieldEnum!], orderBy: [ContributionOrderByWithRelationInput!], skip: Int, take: Int, where: ContributionWhereInput): [Contribution!]!
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  id: String!
  name: String!
}

type UserCount {
  contributions: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerifiedAt: Int!
  id: Int!
  name: Int!
  passwordHash: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTime!
  email: String!
  emailVerifiedAt: DateTime
  id: String!
  name: String!
  passwordHash: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  email: String
  emailVerifiedAt: DateTime
  id: String
  name: String
  passwordHash: String
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  createdAt: DateTime
  email: String
  emailVerifiedAt: DateTime
  id: String
  name: String
  passwordHash: String
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserOrderByWithRelationInput {
  contributions: ContributionOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerifiedAt
  id
  name
  passwordHash
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerifiedAt: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  contributions: ContributionListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
